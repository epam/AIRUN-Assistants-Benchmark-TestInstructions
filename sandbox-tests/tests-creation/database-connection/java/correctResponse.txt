package com.epam.aicode.java;


import java.sql.ResultSet;
import java.sql.Statement;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class DatabaseConnectionManagerTest {

    private DatabaseConnectionManager dbManager;
    private Connection mockConnection;
    private MockedStatic<DriverManager> mockedDriverManager;
    private Statement mockStatement;
    private ResultSet mockResultSet;

    @BeforeEach
    public void setUp() {
        mockConnection = mock(Connection.class);
        mockStatement = mock(Statement.class);
        mockResultSet = mock(ResultSet.class);
        mockedDriverManager = mockStatic(DriverManager.class);
        mockedDriverManager.when(() -> DriverManager.getConnection(anyString(), anyString(), anyString()))
            .thenReturn(mockConnection);
        dbManager = new DatabaseConnectionManager("jdbc:mysql://localhost:3306/testdb", "testuser", "testpassword");
    }

    @AfterEach
    public void tearDown() {
        mockedDriverManager.close();
    }

    @Test
    public void testConnect() throws SQLException {
        Connection connection = dbManager.connect();

        assertNotNull(connection);
        assertFalse(connection.isClosed());
        verify(mockConnection, never()).close();
    }

    @Test
    public void testDisconnect() throws SQLException {
        dbManager.connect();
        dbManager.disconnect();

        verify(mockConnection, times(1)).close();
    }

    @Test
    public void testExecuteQuery() throws SQLException {
        when(mockConnection.createStatement()).thenReturn(mockStatement);
        when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(1);

        dbManager.connect();
        ResultSet resultSet = dbManager.executeQuery("SELECT * FROM test");

        assertNotNull(resultSet);
        assertTrue(resultSet.next());
        assertEquals(1, resultSet.getInt(1));
        verify(mockStatement, times(1)).executeQuery("SELECT * FROM test");
    }
}

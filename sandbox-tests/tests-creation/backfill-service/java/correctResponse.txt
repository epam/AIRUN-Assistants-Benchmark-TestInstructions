package com.epam.aicode.java;

import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class BackfillServiceTest {
    @Mock
    private SrcSystem srcSystem;

    @Mock
    private DstSystem dstSystem;

    @InjectMocks
    private BackfillService backfillService;

    @Test
    void testBackfill_NewAccount() {
        // Arrange
        Transfer transfer = new Transfer("ACC1", new Date(), new BigDecimal("100"));
        when(srcSystem.getTransfers()).thenReturn(Arrays.asList(transfer));
        when(dstSystem.getAccount("ACC1")).thenReturn(null);

        // Act
        backfillService.backfill();

        // Assert
        verify(dstSystem).createAccount(argThat(account -> account.getAccountId().equals("ACC1")
                && account.getCurrentAmount().equals(new BigDecimal("100"))));
    }

    @Test
    void testBackfill_ExistingAccount() {
        // Arrange
        Transfer transfer = new Transfer("ACC1", new Date(), new BigDecimal("100"));
        when(srcSystem.getTransfers()).thenReturn(Arrays.asList(transfer));

        Account existingAccount = new Account("ACC1");
        existingAccount.setCurrentAmount(new BigDecimal("50"));
        when(dstSystem.getAccount("ACC1")).thenReturn(existingAccount);

        // Act
        backfillService.backfill();

        // Assert
        verify(dstSystem).updateAccount(argThat(account -> account.getAccountId().equals("ACC1")
                && account.getCurrentAmount().equals(new BigDecimal("100"))));
        verifyNoMoreInteractions(dstSystem);
    }

    @Test
    void testBackfill_NotNeeded() {
        // Arrange
        String accountId = "ACC1";
        Date date = new Date();
        BigDecimal ammount = new BigDecimal("100");
        Transfer transfer = new Transfer(accountId, date, ammount);
        when(srcSystem.getTransfers()).thenReturn(Arrays.asList(transfer));

        Account existingAccount = new Account(accountId, ammount, date);
        when(dstSystem.getAccount(accountId)).thenReturn(existingAccount);

        // Act
        backfillService.backfill();

        // Assert
        verifyNoMoreInteractions(dstSystem);
    }

    @Test
    void testBackfill_MultipleTransfers() throws ParseException {
        // Arrange
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date1 = dateFormat.parse("2023-01-31");
        Transfer transfer1 = new Transfer("ACC1", date1, new BigDecimal("100"));
        Date date2 = dateFormat.parse("2023-02-13");
        Transfer transfer2 = new Transfer("ACC1", date2, new BigDecimal("50"));
        Date date3 = dateFormat.parse("2023-02-13");
        Transfer transfer3 = new Transfer("ACC1", date3, new BigDecimal("-10"));
        when(srcSystem.getTransfers()).thenReturn(Arrays.asList(transfer1, transfer2, transfer3));
        when(dstSystem.getAccount("ACC1")).thenReturn(new Account("ACC1", new BigDecimal("50"), date2));

        // Act
        backfillService.backfill();

        // Assert
        verify(dstSystem).updateAccount(argThat(account -> account.getAccountId().equals("ACC1")
                && account.getCurrentAmount().equals(new BigDecimal("140")) && account.getUpdateDate().equals(date2)));
        verifyNoMoreInteractions(dstSystem);
    }
}

Given the following C# class:

public class CsvEtlCommand
{
    private string sourceFile;
    private string targetFile;

    public CsvEtlCommand(string sourceFile, string targetFile)
    {
        this.sourceFile = sourceFile;
        this.targetFile = targetFile;
    }

    public void Execute()
    {
        using (var reader = new StreamReader(sourceFile))
        using (var writer = new StreamWriter(targetFile))
        {
            // Extract
            string line = reader.ReadLine();

            // Transform and Load
            while (line != null)
            {
                string[] columns = line.Split(',');
                var transformedLine = Transform(columns);

                writer.WriteLine(transformedLine);
                line = reader.ReadLine();
            }
        }
    }

    private string Transform(string[] columns)
    {
        // Add a simple transformation: reverse the order of the columns
        string transformed = "";
        for (int i = columns.Length - 1; i >= 0; i--)
        {
            transformed += columns[i];
            if (i > 0) transformed += ",";
        }
        return transformed;
    }
}

and Unit test for it:

        [Test()]
        public void ExecuteTest()
        {
            string testFolder = $@"{TestContext.CurrentContext.TestDirectory}\TestLocations\";
            string inputData = "col1,col2\r\n1,2\r\n3,4\r\n";
            string expected = "col2,col1\r\n2,1\r\n4,3\r\n";
            string inputFile = $"{testFolder}Test.csv";
            File.WriteAllText(inputFile, inputData);
            var outputFile = File.Create($"{testFolder}target.csv");
            outputFile.Close();

            var command = new CsvEtlCommand(new string(File.ReadAllText(inputFile)), outputFile.ToString());

            command.Execute();

            var outputData = File.ReadAllText(outputFile.Name);
            Assert.AreEqual(expected, outputData);

            File.Delete(inputFile);
            File.Delete(outputFile.Name);

        }

Test throws an exception.

I'm expecting a fixed test.
The output should be only the test code without any formatting.

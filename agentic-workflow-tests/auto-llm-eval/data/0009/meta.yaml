metadata:
  scenario_id: 0009
  scenario_name: create_functional_tests_with_selenium
  category: test-creation
  experiment_date: 2024-12-25
  model: q
  input_tokens: -1
  output_tokens: -1
  experiment_duration: -1
  repository: golf-application
evaluation_steps:
  completeness:
    - Ensure org.seleniumhq.selenium:selenium-java dependency is added in pom.xml.
    - Ensure org.seleniumhq.selenium:selenium-chrome-driver dependency is added in pom.xml.
    - Ensure org.seleniumhq.selenium:selenium-firefox-driver dependency is added in pom.xml.
    - Ensure org.seleniumhq.selenium:selenium-edge-driver dependency is added in pom.xml.
    - Ensure a base abstract class is created for functional tests.
    - Make sure the base abstract class is annotated with "@SpringBootTest" and configured to use a random port.
    - Make sure the base abstract class is annotated with "@ActiveProfiles" pointing to a functional test profile.
    - Make sure the base abstract class has BeforeEach method initializing Selenium WebDriver and WebDriverWait.
    - Make sure the base abstract class has AfterEach method calling WebDriver quit method.
    - Make sure the base abstract class has a protected login method authentificating a test user.
    - Make sure there is WebDriver bean configuration creating a browser driver instance of type specified by browser property.
    - Ensure a properties file for functional test profile is created in src/test/resources/ directory.
    - Make sure the functional test properties file defines spring.datasource.url, spring.datasource.username, spring.datasource.password properties.
    - Make sure the functional test properties file overrides spring.jpa.hibernate.ddl-auto property is equal to create-drop.
    - Make sure the functional test properties file defines properties test.browser, test.username, test.userpassword.
    - Ensure player management test class is created.
    - Make sure the player management test class defines method testing application shows player list succesfully.
    - Make sure the player management test class defines method testing application adds player succesfully.
    - Make sure the player management test class defines method testing application modifies player succesfully.
    - Make sure the player management test class defines method testing application deletes player list succesfully.
    - Ensure that the command `mvn clean install` output is given and contains evidence of the application successfully built and all tests passed.
    - Make sure the application logged succesfull addition of player to the output.
    - Make sure the application logged succesfull edition of player to the output.
    - Make sure the application logged succesfull deletion of player to the output.
  accuracy:
    - Make sure there is not unrequested code changes, unused imports or code.
    - Ensure that the code is syntactically correct, compiles without errors, and accomplishes the intended functionality.
    - Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized.
    - Ensure that the code is well-documented, with clear and concise documentation for each part of the code.
    - Ensure that the code is clean, readable, adheres to best practices and naming conventions.
    - Ensure that the code is easily maintainable, with proper structure and separation of concerns.
    - Make sure the code makes robust exception handling to handle unexpected issues gracefully and prevent the application from crashing.
    - Ensure that application is secure by using proper authentication, authorization, and data validation techniques, and protect the application from common security vulnerabilities.
    - Ensure that application configuration is flexible and externalized to efficiently manage different environments.

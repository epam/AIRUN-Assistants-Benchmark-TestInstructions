From 5656f2bf15ec093a9251167d71d73d1751320424 Mon Sep 17 00:00:00 2001
From: siarhei-z1 <148881157+siarhei-z1@users.noreply.github.com>
Date: Tue, 17 Dec 2024 16:19:17 +0300
Subject: [PATCH] 0009: Agentic functional test exemplar implementation

---
 pom.xml                                       |  25 +++
 .../golf/app/functional/BaseSeleniumTest.java |  64 ++++++++
 .../functional/config/WebDriverConfig.java    |  26 ++++
 .../player/PlayerManagementTest.java          | 144 ++++++++++++++++++
 .../application-functionalTest.properties     |  12 ++
 5 files changed, 271 insertions(+)
 create mode 100644 src/test/java/com/golf/app/functional/BaseSeleniumTest.java
 create mode 100644 src/test/java/com/golf/app/functional/config/WebDriverConfig.java
 create mode 100644 src/test/java/com/golf/app/functional/player/PlayerManagementTest.java
 create mode 100644 src/test/resources/application-functionalTest.properties

diff --git a/pom.xml b/pom.xml
index 7d465cc..b48dd05 100644
--- a/pom.xml
+++ b/pom.xml
@@ -112,6 +112,31 @@
             <artifactId>modelmapper</artifactId>
             <version>3.2.0</version>
         </dependency>
+    <!-- Selenium -->
+        <dependency>
+            <groupId>org.seleniumhq.selenium</groupId>
+            <artifactId>selenium-java</artifactId>
+            <version>4.18.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.seleniumhq.selenium</groupId>
+            <artifactId>selenium-chrome-driver</artifactId>
+            <version>4.18.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.seleniumhq.selenium</groupId>
+            <artifactId>selenium-firefox-driver</artifactId>
+            <version>4.18.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.seleniumhq.selenium</groupId>
+            <artifactId>selenium-edge-driver</artifactId>
+            <version>4.18.1</version>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
 
     <build>
diff --git a/src/test/java/com/golf/app/functional/BaseSeleniumTest.java b/src/test/java/com/golf/app/functional/BaseSeleniumTest.java
new file mode 100644
index 0000000..65954a1
--- /dev/null
+++ b/src/test/java/com/golf/app/functional/BaseSeleniumTest.java
@@ -0,0 +1,64 @@
+package com.golf.app.functional;
+
+import java.time.Duration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.support.ui.WebDriverWait;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.server.LocalServerPort;
+import org.springframework.test.context.ActiveProfiles;
+
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+@ActiveProfiles("functionalTest")
+public abstract class BaseSeleniumTest {
+
+    @LocalServerPort
+    private int port;
+
+    private String baseUrl;
+
+    @Value("${test.webDriverWaitSeconds}")
+    private long webDriverWaitSeconds;
+
+    @Value("${test.username}")
+    private String userName;
+
+    @Value("${test.userpassword}")
+    private String userPassword;
+
+    @Autowired
+    protected WebDriver driver;
+
+    protected WebDriverWait wait;
+
+    @BeforeEach
+    public void setUp() {
+        baseUrl = "http://localhost:" + port;
+        driver.manage().window().maximize();
+        wait = new WebDriverWait(driver, Duration.ofSeconds(webDriverWaitSeconds));
+    }
+
+    @AfterEach
+    public void tearDown() {
+        if (driver != null) {
+            driver.quit();
+        }
+    }
+
+    protected String urlFor(String path) {
+        return baseUrl + path;
+    }
+
+    protected void login() {
+        driver.get(urlFor("/login"));
+        driver.findElement(By.name("username")).sendKeys(userName);
+        driver.findElement(By.name("password")).sendKeys(userPassword);
+        driver.findElement(By.cssSelector("button[type='submit']")).click();
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/golf/app/functional/config/WebDriverConfig.java b/src/test/java/com/golf/app/functional/config/WebDriverConfig.java
new file mode 100644
index 0000000..a23c43f
--- /dev/null
+++ b/src/test/java/com/golf/app/functional/config/WebDriverConfig.java
@@ -0,0 +1,26 @@
+package com.golf.app.functional.config;
+
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.edge.EdgeDriver;
+import org.openqa.selenium.firefox.FirefoxDriver;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class WebDriverConfig {
+
+    @Value("${test.browser}")
+    private String browser;
+
+    @Bean
+    WebDriver webDriver() {
+        return switch (browser.toLowerCase()) {
+            case "chrome" -> new ChromeDriver();
+            case "edge" -> new EdgeDriver();
+            case "firefox" -> new FirefoxDriver();
+            default -> throw new IllegalArgumentException("Unsupported browser type: " + browser);
+        };
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/golf/app/functional/player/PlayerManagementTest.java b/src/test/java/com/golf/app/functional/player/PlayerManagementTest.java
new file mode 100644
index 0000000..7086f96
--- /dev/null
+++ b/src/test/java/com/golf/app/functional/player/PlayerManagementTest.java
@@ -0,0 +1,144 @@
+package com.golf.app.functional.player;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import java.text.DecimalFormat;
+import java.time.LocalDate;
+import java.util.UUID;
+
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.MethodOrderer;
+import org.junit.jupiter.api.Order;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestMethodOrder;
+import org.openqa.selenium.Alert;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+
+import com.golf.app.functional.BaseSeleniumTest;
+
+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
+class PlayerManagementTest extends BaseSeleniumTest {
+
+    private static Long createdPlayerId;
+    private static Player createdPlayer;
+
+    @BeforeAll
+    static void beforeAll() {
+        createdPlayerId = null;
+        createdPlayer = null;
+    }
+
+    @Test
+    @Order(1)
+    void shouldNavigateToPlayerList() {
+        login();
+        driver.get(urlFor("/player"));
+        wait.until(ExpectedConditions.titleContains("Players"));
+
+        WebElement table = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("playersMainTable")));
+        assertTrue(table.isDisplayed());
+    }
+
+    @Test
+    @Order(2)
+    void shouldAddNewPlayer() {
+        login();
+        driver.get(urlFor("/player/add"));
+
+        Player p = Player.createPlayer();
+
+        driver.findElement(By.id("nameInput")).sendKeys(p.name());
+        driver.findElement(By.id("surnameInput")).sendKeys(p.surname());
+        driver.findElement(By.id("birthdayInput")).sendKeys(p.birthday());
+        driver.findElement(By.id("genderInput")).sendKeys(p.gender());
+        driver.findElement(By.id("emailInput")).sendKeys(p.email());
+        driver.findElement(By.id("hcpInput")).sendKeys(p.hcp());
+        driver.findElement(By.cssSelector("button[type='submit']")).click();
+
+        wait.until(ExpectedConditions.presenceOfElementLocated(By.id("playersMainTable")));
+
+        // Verify we're back on the main player page
+        assertEquals(urlFor("/player"), driver.getCurrentUrl());
+
+        // Verify the new player appears in the table
+        WebElement playerLink = driver
+                .findElement(By.xpath("//a/h6[contains(text(), '" + p.surname().toUpperCase() + "')]/parent::*"));
+        String href = playerLink.getAttribute("href");
+        createdPlayerId = Long.parseLong(href.substring(href.lastIndexOf("/") + 1));
+        createdPlayer = p;
+    }
+
+    @Test
+    @Order(3)
+    void shouldEditPlayer() {
+        assertPlayerCreated();
+        login();
+        driver.get(urlFor("/player/" + createdPlayerId + "/edit"));
+
+        String email = UUID.randomUUID().toString() + "@test.com";
+        WebElement emailInput = driver.findElement(By.id("emailInput"));
+        emailInput.clear();
+        emailInput.sendKeys(email);
+
+        driver.findElement(By.cssSelector("button[type='submit']")).click();
+
+        wait.until(ExpectedConditions.presenceOfElementLocated(By.className("table_for_details")));
+
+        // Verify the player attributes have been updated
+        driver.findElement(By.xpath("//td[text()='" + email + "']"));
+    }
+
+    @Test
+    @Order(4)
+    void shouldDeletePlayer() {
+        assertPlayerCreated();
+        login();
+        driver.get(urlFor("/player/" + createdPlayerId));
+
+        driver.findElement(
+                By.xpath(
+                        "//form[@action='" + "/player/" + createdPlayerId + "/remove" + "']/button[@type='submit']"))
+                .click();
+
+        wait.until(ExpectedConditions.alertIsPresent());
+        Alert confirm1 = driver.switchTo().alert();
+        confirm1.accept();
+
+        wait.until(ExpectedConditions.alertIsPresent());
+        Alert confirm2 = driver.switchTo().alert();
+        confirm2.accept();
+
+        wait.until(ExpectedConditions.presenceOfElementLocated(By.id("playersMainTable")));
+
+        // Verify the deleted player disappears in the table
+        int playerLinksCount = driver.findElements(By.xpath("//a[@href='/player/" + createdPlayerId + "']")).size();
+        assertEquals(0, playerLinksCount);
+    }
+
+    private static void assertPlayerCreated() {
+        String message = "Player must be created";
+        assertNotNull(createdPlayerId, message);
+        assertNotNull(createdPlayer, message);
+    }
+}
+
+record Player(String name, String surname, String birthday, String gender, String email, String hcp) {
+
+    private static DecimalFormat HCP_FORMAT = new DecimalFormat("#0.00");
+
+    public static Player createPlayer() {
+        String name = "John";
+        String surname = UUID.randomUUID().toString();
+        String birthday = LocalDate
+                .of(1900 + (int) (Math.random() * 100), 1 + (int) (Math.random() * 11), 1 + (int) (Math.random() * 27))
+                .toString();
+        String gender = "MALE";
+        String email = surname + "@m.com";
+        String hcp = String.valueOf(HCP_FORMAT.format(Math.random() * 20));
+        return new Player(name, surname, birthday, gender, email, hcp);
+    }
+}
\ No newline at end of file
diff --git a/src/test/resources/application-functionalTest.properties b/src/test/resources/application-functionalTest.properties
new file mode 100644
index 0000000..7ae7000
--- /dev/null
+++ b/src/test/resources/application-functionalTest.properties
@@ -0,0 +1,12 @@
+spring.datasource.url=jdbc:mysql://localhost:3306/golf_test_db
+spring.datasource.username=root
+spring.datasource.password=root
+spring.jpa.hibernate.ddl-auto=create-drop
+
+# Browser configuration (chrome, firefox, or edge)
+test.browser=firefox
+
+test.webDriverWaitSeconds=10
+
+test.username=1
+test.userpassword=1
\ No newline at end of file
-- 
2.45.1


<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>0008</Id>
    <Title>Refactor Golf application, replace logback logging with Log4j 2.x logging framework and SLF4J as logging facade</Title>
    <Category>solution-migration</Category>
    <Complexity>medium</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
            <Language>XML</Language>
        </Languages>
    </Stack>
    <Task>
<![CDATA[
Refactor Golf application, replace logback logging with log4j2.

# migration

Migrate logback configuration to log4j2 configuration.
Configure log4j2 for performance.

# logging
Unify the application logging by using SLF4J logging facade:
- replace all other loggers with SLF4J loggers everywhere in the application.
- use Lombok annotation to declare logger whether it is used in class.
- replace printing to system standard output with SLF4J logging in all classes.

# cleanup
Cleanup unused or legacy logging configuration.
]]>
    </Task>
    <Context>
        <Files>
            <File>src/main/resources/application.properties</File>
            <File>src/main/resources/logback-spring.xml</File>
            <File>src/main/resources/logging.properties</File>
            <File>pom.xml</File>
            <File>src/main/java/com/golf/app/controller/PlayerController.java</File>
            <File>src/main/java/com/golf/app/controller/RoundController.java</File>
            <File>src/main/java/com/golf/app/security/CustomAccessDeniedHandler.java</File>
            <File>src/main/java/com/golf/app/security/CustomLogoutSuccessHandler.java</File>
        </Files>
    </Context>
    <Arrangement>
        <Arrange>Copy logback-spring.xml to golf-application/src/main/resources/logback-spring.xml</Arrange>
        <Arrange>Add the file to git index with the command: `git add src/main/resources/logback-spring.xml`</Arrange>
        <Arrange>Record the changes to the repository with the command: `git commit -m "arrange codebase for test"`</Arrange>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep>Build the application with the command: `mvn clean install`</TestStep>
        <TestStep>Make sure there is not logback dependency by running the command: `mvn dependency:tree -Dincludes=ch.qos.logback:*`</TestStep>
        <TestStep>Start the application with the command: `mvn spring-boot:run`</TestStep>
        <TestStep>Examine content of logs/golf-app.log</TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure spring-boot-starter-logging is excluded from spring-boot-starter dependency in pom.xml.</Assert>
            <Assert>Ensure spring-boot-starter-log4j2 dependency is added in pom.xml.</Assert>
            <Assert>Ensure com.lmax:disruptor dependency is added in pom.xml.</Assert>
            <Assert>Make sure there is not logback dependency by running the command `mvn dependency:tree -Dincludes=ch.qos.logback:*`.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="low">
            <Assert>Ensure logback-spring.xml is deleted from resources folder.</Assert>
            <Assert>Ensure logging.properties is deleted from resources folder.</Assert>
            <Assert>Ensure logging properties prefixed logging.level. are removed from src/main/resources/application.properties.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure log4j2 configuration file is added in resources folder.</Assert>
            <Assert>Ensure console appender is added in log4j2 configuration.</Assert>
            <Assert>Ensure file appender is added in log4j2 configuration.</Assert>
            <Assert>Ensure logger for "com.golf.app" is configured in log4j2 configuration.</Assert>
            <Assert>Ensure logger for "org.springframework.web" is configured in log4j2 configuration.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure logging is fully asynchronous in Log4j2 configuration.</Assert>
            <Assert>Ensure LMAX Disruptor is utilized in Log4j2's logging.</Assert>
            <Assert>Ensure file appender is configured as RollingRandomAccessFile in log4j2 configuration.</Assert>
            <Assert>Ensure ALL log4j2 loggers are configured as asynchronous.</Assert>
            <Assert weight="low">Make sure that parameterized messages are used everywhere in SLF4J logging calls to boost logging performance for disabled logging statements.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure Slf4j annotation is added to PlayerController class.</Assert>
            <Assert>Ensure LOGGER field declaration is removed from PlayerController class.</Assert>
            <Assert>Ensure PlayerController addPlayer method logging is changed to log.info(...).</Assert>
            <Assert>Ensure PlayerController updatePlayer method logging is changed to log.info(...).</Assert>
            <Assert>Ensure PlayerController deletePlayer method logging is changed to log.info(...).</Assert>
            <Assert>Ensure Slf4j annotation is added to CustomAccessDeniedHandler class.</Assert>
            <Assert>Ensure CustomAccessDeniedHandler handle method logging is changed to log.warn(...).</Assert>
            <Assert>Ensure Slf4j annotation is added to CompetitionController class.</Assert>
            <Assert>Make sure that all calls of System.out.println(...) are replaced with log.info(...) or log.warn(...) or log.debug(...) in CompetitionController class.</Assert>
            <Assert>Ensure Slf4j annotation is added to RoundController class.</Assert>
            <Assert>Make sure that all calls of System.out.println(...) are replaced with log.info(...) or log.warn(...) or log.debug(...) in RoundController class.</Assert>
            <Assert>Ensure Slf4j annotation is added to CustomLogoutSuccessHandler class.</Assert>
            <Assert>Make sure that a call of System.out.println(...) is replaced with log.info(...) or log.warn(...) or log.debug(...) in CustomLogoutSuccessHandler class.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Verify that the application console output is given and contains the application logs.</Assert>
            <Assert>Verify that logs/golf-app.log file is created AND contains the application log events.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="medium">
            <Assert>Ensure that the command `mvn clean install` output is given and contains evidence of the application successfully build.</Assert>
            <Assert>Ensure that the command `mvn spring-boot:run` output is given and contains evidence of the application successful run.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested code modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
    </Criteria>
    <MetaInfo>
        <Meta>See [testing-template.md](testing-template.md) for example of extra report sections.</Meta>
        <Meta>See samples of correct solution in the [exemplar directory](exemplar).</Meta>
    </MetaInfo>
</TestSpec>

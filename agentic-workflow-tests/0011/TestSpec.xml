<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>00011</Id>
    <Title>Migrate in-memory user and role definitions to database in Golf application</Title>
    <Category>code-refactoring</Category>
    <Complexity>low</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
            <Language>SQL</Language>
        </Languages>
    </Stack>
    <Task>
<![CDATA[
Migrate in-memory user and roles definitions to database.

Configure Spring Security to retrieve user information from the database.

Consider that default Spring Security schema should be used to store users and roles.
Ignore current user registration related model and functionality.

Create a migration SQL script to import existing in-memory users and roles to database.
]]>
    </Task>
    <Context>
        <Files>
            <File>src/main/java/com/golf/app/security/AppSecurityConfig.java</File>
            <File>src/main/resources/application.properties</File>
        </Files>
    </Context>
    <Arrangement>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep><![CDATA[
Copy [BCryptUsersPasswordSqlGenerator](BCryptUsersPasswordSqlGenerator.java) to golf-application/src/main/java.
Encode BCrypt-encoded user passwords by running BCryptUsersPasswordSqlGenerator.
Replace user passwords in generated migration SQL script with the encoded ones.
]]>
        </TestStep>
        <TestStep>Run the generated migration SQL script(s)</TestStep>
        <TestStep>Enable DEBUG logging for Spring Security by adding the corresponding logger to `src/main/resources/logback-spring.xml`: `<logger name="org.springframework.security" level="DEBUG" />`</TestStep>
        <TestStep>Update database configuration in application.properties to match it with your local environment</TestStep>
        <TestStep>Build the application with the command: `mvn clean install`</TestStep>
        <TestStep>Launch the application with the command: `mvn spring-boot:run -Dspring-boot.run.arguments="--logging.level.org.springframework.security=DEBUG"`</TestStep>
        <TestStep>Open the application at http://localhost:8082 and login with user `1` credentials</TestStep>
        <TestStep>Open the application at http://localhost:8082 and login with user `user` credentials</TestStep>
        <TestStep>Open the application at http://localhost:8082 and login with user `coach` credentials</TestStep>
        <TestStep>Open the application at http://localhost:8082 and login with user `a` credentials</TestStep>
        <TestStep>Add results of the manual tests to output.md. See [testing-template.md](testing-template.md).</TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that the method declaring InMemoryUserDetailsManager bean has been removed from AppSecurityConfig.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that a bean implementing UserDetailsService is created and it obtains user details from database.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that a SQL script(s) to import existing in-memory users and roles to database is created.</Assert>
            <Assert>Ensure that the SQL script creates tables USERS and AUTHORITIES.</Assert>
            <Assert>Ensure that the SQL script creates an unique index for AUTHORITIES table for username, authority.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that the SQL script inserts user '1' into USERS table.</Assert>
            <Assert>Ensure that the SQL script inserts user 'user' into USERS table.</Assert>
            <Assert>Ensure that the SQL script inserts user 'coach' into USERS table.</Assert>
            <Assert>Ensure that the SQL script inserts user 'a' into USERS table.</Assert>
            <Assert>Ensure that the SQL script inserts 'user', 'ROLE_USER' into AUTHORITIES table.</Assert>
            <Assert>Ensure that the SQL script inserts '1', 'ROLE_USER' into AUTHORITIES table.</Assert>
            <Assert>Ensure that the SQL script inserts 'coach', 'ROLE_COACH' into AUTHORITIES table.</Assert>
            <Assert>Ensure that the SQL script inserts 'a', 'ROLE_ADMIN' into AUTHORITIES table.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="medium">
            <Assert>Make sure that the application is built without errors</Assert>
            <Assert>Make sure that the application is launched without errors</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Assert that user '1' successfully did login with its credentials.</Assert>
            <Assert>Assert that user 'user' successfully logged in with its credentials.</Assert>
            <Assert>Assert that user 'coach' successfully logged in with its credentials.</Assert>
            <Assert>Assert that user 'a' successfully logged in with its credentials.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
    </Criteria>
    <MetaInfo>
        <Meta>See samples of correct solution in the [exemplar directory](exemplar).</Meta>
    </MetaInfo>
</TestSpec>

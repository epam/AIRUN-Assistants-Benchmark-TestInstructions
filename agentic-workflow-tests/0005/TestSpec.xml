<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>0005</Id>
    <Title>Publish competition change events to Kafka</Title>
    <Objectives>
    </Objectives>
    <Category>solution-or-component-generation</Category>
    <Complexity>high</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <!-- Technology stack -->
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
        </Languages>
        <Technologies>
            <Technology>Kafka</Technology>
        </Technologies>
    </Stack>
    <Task>
The application allows to manage golf competitions.
Add publishing competition change events to Kafka.
A change event should include change type and the following competition attributes: Id,
competition name, start date, end date, course name.
    </Task>
    <Context>
        <Files>
            <File>pom.xml</File>
            <File>src/main/resources/application.properties</File>
            <File>src/main/java/com/golf/app/AppConfiguration.java</File>
            <File>src/main/java/com/golf/app/mapper/CompetitionMapper.java</File>
            <File>src/main/java/com/golf/app/model/Competition.java</File>
            <File>src/main/java/com/golf/app/service/CompetitionService.java</File>
            <File>src/main/java/com/golf/app/service/CompetitionServiceImpl.java</File>
            <File>src/main/java/com/golf/app/repo/CompetitionRepository.java</File>
        </Files>
    </Context>
    <Arrangement>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep>Update database configuration in application.properties to make it compatible with your local environment</TestStep>
        <TestStep>Update Kafka configuration in application.properties to match it with your local environment</TestStep>
        <TestStep>Set KAFKA_FROM_HOST environment variable: `export KAFKA_FROM_HOST=your_kafka_host`</TestStep>
        <TestStep>Start the container with the command: `docker-compose up`</TestStep>
        <TestStep>Build the application with the command: `mvn clean install`</TestStep>
        <TestStep>Launch the application with the command: `mvn spring-boot:run -Dspring-boot.run.arguments="--logging.level.org.springframework.kafka=INFO --logging.level.org.apache.kafka=INFO"`</TestStep>
        <TestStep>Open application UI at http://localhost:8082/</TestStep>
        <TestStep>Click  *Competitions*  link and edit competitions:
                    - create a competition
                    - update a competition
        </TestStep>
        <TestStep>Open Kafka UI at http://localhost:8080/</TestStep>
        <TestStep>Click  *Topics* on the sidebar and Golf topic then.</TestStep>
        <TestStep>Click the topic  *Messages*  link and make sure that all competition edits have corresponding Kafka messages.</TestStep>
        <TestStep>Write down the create, update, delete messages to output.md. See (testing-template.md)[testing-template.md]</TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness">
            <Assert>Ensure spring-kafka dependency is added in pom.xml.</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Ensure Kafka bootstrap servers have been configured in application.properties.</Assert>
            <Assert>Ensure Kafka producer value serializer is configured as Json serializer in application.properties.</Assert>
            <Assert weight="low">Ensure Kafka topic for Golf competitions publishing is configured in application.properties.</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that competition save invokes publishing of competition change event to Kafka.</Assert>
            <Assert>Make sure that competition update invokes publishing of competition change event to Kafka.</Assert>
            <Assert>Make sure that competition deletion invokes publishing of competition change event to Kafka.</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Ensure Transactional Outbox pattern is used to publish competition change event to Kafka.</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Ensure that competition SAVE message published to Kafka.</Assert>
            <Assert>Ensure that competition SAVE message has the following attributes: Id, competition name, start date, end date, course name.</Assert>
            <Assert>Ensure that competition UPDATE message published to Kafka.</Assert>
            <Assert>Ensure that competition UPDATE message has the following attributes: Id, competition name, start date, end date, course name.</Assert>
            <!-- Competition deletion is not tested due to a bug in the controller -->
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested code modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
    </Criteria>
    <!-- Additional information -->
    <MetaInfo>
        <Meta>See sample of correct solution in the [exemplar directory](exemplar).</Meta>
    </MetaInfo>
</TestSpec>
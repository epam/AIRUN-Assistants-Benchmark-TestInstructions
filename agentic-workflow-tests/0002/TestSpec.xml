<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>0002</Id>
    <Title>Add Flyway support to continuously remodel the database schema</Title>
    <Objectives>
The more abstract version of [0001](../0001).
    </Objectives>
    <Category>code-refactoring</Category>
    <Complexity>medium</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
            <Technology>Docker</Technology>
            <Technology>MySQL</Technology>
            <Technology>Flyway</Technology>
        </Languages>
    </Stack>
    <Task>
Add Flyway support continuously remodel the database schema outside the application.
Add MySQL container for development and testing.
Use given Jakarta Persistence entities classes from the package com.golf.app.model to create initial schema script.
    </Task>
    <Context>
        <Files>
            <File>src/main/java/com/golf/app/model/Competition.java</File>
            <File>src/main/java/com/golf/app/model/Course.java</File>
            <File>src/main/java/com/golf/app/model/Hole.java</File>
            <File>src/main/java/com/golf/app/model/Judge.java</File>
            <File>src/main/java/com/golf/app/model/Marker.java</File>
            <File>src/main/java/com/golf/app/model/Par.java</File>
            <File>src/main/java/com/golf/app/model/Player.java</File>
            <File>src/main/java/com/golf/app/model/PlayerPhoto.java</File>
            <File>src/main/java/com/golf/app/model/Round.java</File>
            <File>src/main/java/com/golf/app/model/RoundScore.java</File>
            <File>src/main/java/com/golf/app/model/Score.java</File>
            <File>src/main/java/com/golf/app/model/ScoreCard.java</File>
            <File>src/main/java/com/golf/app/model/ScoreCardImage.java</File>
            <File>src/main/java/com/golf/app/model/StrokeIndex.java</File>
            <File>src/main/java/com/golf/app/model/Team.java</File>
            <File>src/main/java/com/golf/app/model/Tee.java</File>
            <File>src/main/java/com/golf/app/model/User.java</File>
            <File>src/main/resources/application.properties</File>
        </Files>
    </Context>
    <Arrangement>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep>Update database configuration in application.properties to match it with your local environment</TestStep>
        <TestStep>Update database configuration in flyway.conf to match it with your local environment</TestStep>
        <TestStep>Start Mysql container with the command: `docker-compose up`</TestStep>
        <TestStep>Migrate the database with the command: `flyway -configFiles=flyway.conf migrate`</TestStep>
        <TestStep>Build the application with the command: `mvn clean install`</TestStep>
        <TestStep>Launch the application with the command: `mvn spring-boot:run -Dspring-boot.run.arguments=spring.jpa.hibernate.ddl-auto=validate`</TestStep>
        <TestStep>
<![CDATA[
Send test requests to the application:

```bash
curl -v -u 1:1 curl -v -u 1:1 http://localhost:8082/competition/2025

curl -v -u 1:1 http://localhost:8082/player

curl -v -u 1:1 http://localhost:8082/round
```
]]>
        </TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness" weight="high">
            <Assert weight="low">Ensure that DB initialization migration script is created in src/main/resources/db/migration/ directory.</Assert>
            <Assert weight="high">Ensure that DB migration applied successfully without DATABASE SCHEMA errors.</Assert>
            <Assert weight="high">Ensure that database schema validation passed without errors during the application launch.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="low">
            <Assert>Ensure that flyway.conf is created.</Assert>
            <Assert>Ensure that Flyway migration has been completed without errors.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="low">
            <Assert>Ensure that docker-compose.yml file is created.</Assert>
            <Assert>Ensure that docker-compose.yml contains definitions of mysql service.</Assert>
            <Assert>Ensure that docker-compose.yml contains definitions of mysql data volume.</Assert>
            <Assert>Ensure that Mysql container started without error with the command `docker-compose up`.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="medium">
            <Assert>Ensure that Hibernate configuration is changed from updating database schema to validating database schema.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="medium">
            <Assert>Make sure that the application is built without errors</Assert>
            <Assert>Make sure that the application is launched without errors</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Make sure the application responds to GET request http://localhost:8082/competition/2025 without server error (500-599).</Assert>
            <Assert>Make sure the application responds to GET request http://localhost:8082/player without server error (500-599).</Assert>
            <Assert>Make sure the application responds to GET request http://localhost:8082/round without server error (500-599).</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested code modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
    </Criteria>
    <MetaInfo>
        <Meta>See [testing-template.md](testing-template.md)</Meta>
    </MetaInfo>
</TestSpec>

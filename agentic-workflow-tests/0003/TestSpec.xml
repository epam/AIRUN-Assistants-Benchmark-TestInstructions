<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>0003</Id>
    <Title>Refactor Golf application access-control layer, replace Basic Authentication with Oauth2 Authorization</Title>
    <Category>code-refactoring</Category>
    <Complexity>medium</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
        </Languages>
    </Stack>
    <Task>
<![CDATA[
Refactor Golf application access-control layer, replace Basic Authentication with OAuth2 authorization.

Establish scope-based authorization:
- /admin endpoint should be accessed only by a client granted with GOLF:ADMIN scope.
- a client granted with GOLF:COACH scope should access all endpoints except /admin endpoint.
- a client granted with GOLF:USER scope should access all read only endpoints except /admin endpoint.
]]>
    </Task>
    <Context>
        <Files>
            <File>pom.xml</File>
            <File>src/main/resources/application.properties</File>
            <File>src/main/java/com/golf/app/security/AppSecurityConfig.java</File>
            <File>src/main/java/com/golf/app/controller/AdminController.java</File>
            <File>src/main/java/com/golf/app/controller/CompetitionController.java</File>
            <File>src/main/java/com/golf/app/controller/CompetitionExceptionHandlerController.java</File>
            <File>src/main/java/com/golf/app/controller/CourseController.java</File>
            <File>src/main/java/com/golf/app/controller/ExceptionHandlerController.java</File>
            <File>src/main/java/com/golf/app/controller/MainController.java</File>
            <File>src/main/java/com/golf/app/controller/PlayerController.java</File>
            <File>src/main/java/com/golf/app/controller/PlayerPhotoController.java</File>
            <File>src/main/java/com/golf/app/controller/RoundController.java</File>
            <File>src/main/java/com/golf/app/controller/RoundScoreController.java</File>
            <File>src/main/java/com/golf/app/controller/ScoreCardController.java</File>
            <File>src/main/java/com/golf/app/controller/ScoreCardImageController.java</File>
            <File>src/main/java/com/golf/app/controller/UserController.java</File>
        </Files>
    </Context>
    <Arrangement>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep><![CDATA[
download WireMock JWT Standalone extension with the command:

```bash
(cd extensions && curl -O https://repo1.maven.org/maven2/org/wiremock/extensions/wiremock-jwt-extension-standalone/0.3.0/wiremock-jwt-extension-standalone-0.3.0.jar)
```
]]>
        </TestStep>
        <TestStep><![CDATA[
start Mysql container and OAuth2 authorization server container with the command:

```bash
docker-compose up
```
]]>
        </TestStep>
        <TestStep>update database configuration in application.properties to match it with your local environment</TestStep>
        <TestStep>update OAUTH2 resource server URI configuration in application.properties to match it with your local environment</TestStep>
        <TestStep>build the application with the command: `mvn clean install`</TestStep>
        <TestStep>start the application with the command: `mvn spring-boot:run -Dspring-boot.run.arguments="--logging.level.org.springframework.security=DEBUG"`</TestStep>
        <TestStep><![CDATA[
assert /admin request is accessible with GOLF:ADMIN scope by running the commands:

```bash
GOLF_SCOPE=GOLF:ADMIN
ACCESSTOKEN=`curl -s --request POST --url ${GOLF_APP_OAUTH2_ISSUER_URI}/oauth2/token -u u1:p1 --header 'accept: application/json' --header 'content-type: application/x-www-form-urlencoded' --data "grant_type=client_credentials&scope=${GOLF_SCOPE}" | jq -r .access_token`

echo GOLF_SCOPE=$GOLF_SCOPE
curl -v --header "Authorization: Bearer $ACCESSTOKEN" http://localhost:8082/admin
```
]]>
        </TestStep>
        <TestStep><![CDATA[
verify the response:

```
HTTP status code: 200
Content-Type: text/plain;charset=UTF-8
Body: admin
```
]]>
        </TestStep>
        <TestStep><![CDATA[
assert /admin request is not accessible with scope other than GOLF:ADMIN by running the commands:

```bash
GOLF_SCOPE=GOLF:COACH
ACCESSTOKEN=`curl -s --request POST --url ${GOLF_APP_OAUTH2_ISSUER_URI}/oauth2/token -u u1:p1 --header 'accept: application/json' --header 'content-type: application/x-www-form-urlencoded' --data "grant_type=client_credentials&scope=${GOLF_SCOPE}" | jq -r .access_token`

echo GOLF_SCOPE=$GOLF_SCOPE
curl -v --header "Authorization: Bearer $ACCESSTOKEN" http://localhost:8082/admin
```
]]>
        </TestStep>
        <TestStep><![CDATA[
verify the response:

```
HTTP status code: 403
WWW-Authenticate: Bearer error="insufficient_scope", error_description="The request requires higher privileges than provided by the access token.", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"
```
]]>
        </TestStep>
        <TestStep><![CDATA[
assert /player/add GET request is accessible with GOLF:USER scope by running the commands:

```bash
GOLF_SCOPE=GOLF:USER
ACCESSTOKEN=`curl -s --request POST --url ${GOLF_APP_OAUTH2_ISSUER_URI}/oauth2/token -u u1:p1 --header 'accept: application/json' --header 'content-type: application/x-www-form-urlencoded' --data "grant_type=client_credentials&scope=${GOLF_SCOPE}" | jq -r .access_token`

echo GOLF_SCOPE=$GOLF_SCOPE
curl -v --header "Authorization: Bearer $ACCESSTOKEN" http://localhost:8082/player/add
```
]]>
        </TestStep>
        <TestStep><![CDATA[
verify the response:

```
HTTP status code: 200
Content-Type: text/html;charset=UTF-8
Body contains src/main/resources/templates/player/player-add.html
```
]]>
        </TestStep>
        <TestStep><![CDATA[
assert /player/add POST request is accessible with GOLF:COACH scope by running the commands:

```bash
GOLF_SCOPE=GOLF:COACH
ACCESSTOKEN=`curl -s --request POST --url ${GOLF_APP_OAUTH2_ISSUER_URI}/oauth2/token -u u1:p1 --header 'accept: application/json' --header 'content-type: application/x-www-form-urlencoded' --data "grant_type=client_credentials&scope=${GOLF_SCOPE}" | jq -r .access_token`

echo GOLF_SCOPE=$GOLF_SCOPE
curl -v --header "Authorization: Bearer $ACCESSTOKEN" --header "Content-Type: application/x-www-form-urlencoded" --request POST --data 'name=Naomi&surname=OsaAF' http://localhost:8082/player/add
```
]]>
        </TestStep>
        <TestStep><![CDATA[
verify the response:

```
HTTP status code: 302
Location: http://localhost:8082/player
```
]]>
        </TestStep>
        <TestStep>add results of the manual tests to output.md.</TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that spring-boot-starter-oauth2-resource-server dependency is added to pom.xml.</Assert>
            <Assert>Ensure that authorization server URI is specified by `spring.security.oauth2.resourceserver.jwt.issuer-uri` property in application.properties.</Assert>
            <Assert>Ensure that EXTERNAL authorization server is configured.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="high">
            <Assert>Ensure that OAuth2 authorization is configured in Spring configuration.</Assert>
            <Assert>Ensure that access to /admin endpoint is restricted to clients granted with GOLF:ADMIN scope.</Assert>
            <Assert>Ensure that clients granted with GOLF:COACH scope have access to all endpoints except /admin endpoint.</Assert>
            <Assert>Ensure that clients granted with GOLF:USER scope have access to read only endpoints except /admin endpoint.</Assert>
            <Assert>Ensure that the application is explicitly configured to deny access by default for newly added endpoints.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="low">
            <Assert>Ensure that in-memory user details management is removed from Spring configuration.</Assert>
        </Criterion>
        <Criterion type="completeness" weight="medium">
            <Assert>Make sure that the application is built without errors</Assert>
            <Assert>Make sure that the application is launched without errors</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
    </Criteria>
    <MetaInfo>
        <Meta>See [testing-template.md](testing-template.md)</Meta>
    </MetaInfo>
</TestSpec>

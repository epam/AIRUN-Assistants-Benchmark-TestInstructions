<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<TestSpec>
    <Id>0013</Id>
    <Title>Verify User e-mail upon Registration in Golf application</Title>
    <Objectives>
    </Objectives>
    <Category>solution-or-component-generation</Category>
    <Complexity>medium</Complexity>
    <CodeRepository>https://github.com/PolinaTolkachova/golf-application</CodeRepository>
    <Stack>
        <Languages>
            <Language primary="true">Java</Language>
        </Languages>
        <Technologies>
            <Technology>Spring Security</Technology>
            <Technology>e-mail</Technology>
        </Technologies>
    </Stack>
    <Task>
<![CDATA[
## Task

Finish user registration process by verifying the user’s email to enable the user’s account

## Context

The application UI is protected with Spring Security.
The default Spring Security schema is used to store users and roles.
An user enters his e-mail address during registration.

## Instructions

- Make an user account to be disabled just after registration.
- Send a confirmation email message to an user entered e-mail address with link pointing to the application e-mail verification endpoint.
- Make the e-mail address verification link expires within a configured period, 5 minutes by default.
- Enable the user account after the verification link is visited.
]]>
    </Task>
    <Context>
        <Files>
            <File></File>
        </Files>
    </Context>
    <Arrangement>
        <Arrange>
<![CDATA[
Apply [the patch from 0011 test](../0011/exemplar/0001-Migrate-in-memory-user-and-roles-definitions-to-data.patch) to prepare project codebase for test:

```bash
git am < path_to_patch/0001-Migrate-in-memory-user-and-roles-definitions-to-data.patch
```
]]>
        </Arrange>
        <Arrange>
<![CDATA[
Apply [the patch from 0012 test](../0012/exemplar/0001-Fix-up-user-registration.patch) to prepare project codebase for test:

```bash
git am < path_to_patch/0012/exemplar/0001-Fix-up-user-registration.patch
```
]]>
        </Arrange>
        <Arrange>
<![CDATA[
Start MailHog docker container:

```bash
docker run -p 8025:8025 -p 1025:1025 mailhog/mailhog
```
]]>
        </Arrange>
    </Arrangement>
    <Act>
        <ActStep>Submit the task and wait implementation plan is generated</ActStep>
        <ActStep>Go to the implementation plan</ActStep>
        <ActStep>Follow the implementation plan steps and modify source code following the instructions</ActStep>
    </Act>
    <TestPlan>
        <TestStep>Update database configuration in application.properties to make it compatible with your local environment</TestStep>
        <TestStep>Update email configuration in application.properties to make it compatible with your local environment</TestStep>
        <TestStep>Build the application with the command: `mvn clean install`</TestStep>
        <TestStep>Start the application with the command: `mvn spring-boot:run`</TestStep>
        <TestStep>Open the application [user registration page](http://localhost:8082/register)</TestStep>
        <TestStep>Register a first user</TestStep>
        <TestStep>Visit [MailHog UI](http://localhost:8025/)</TestStep>
        <TestStep>Look for the user registration email in Inbox</TestStep>
        <TestStep>Visit the user email address verification link found in the email</TestStep>
        <TestStep>Login with the first user credentials</TestStep>
        <TestStep>Register a second user</TestStep>
        <TestStep>Try to login with the second user credentials</TestStep>
        <TestStep>Wait 5 minutes and look for the user email registration email in MailHog Inbox</TestStep>
        <TestStep>Try to visit the user email address verification link found in the email</TestStep>
        <TestStep>Add results of the registration test and login test to output.md</TestStep>
    </TestPlan>
    <Criteria>
        <Criterion type="completeness">
            <Assert>Ensure that org.springframework.boot:spring-boot-starter-mail dependency has been added added to `pom.xml`</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Ensure that spring mail has been configured in `src/main/resources/application.properties`</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make user that registration confirmation template has been created</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make user that registration verification template has been created</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that `UserController.registerUser` method returns registration confirmation view name</Assert>
            <Assert>Make sure that `verifyEmail` method parameterized by token is added to `UserController` class</Assert>
            <Assert>Make sure that `UserController.verifyEmail` method is annotated with `@GetMapping`</Assert>
            <Assert>Make sure that `UserController.verifyEmail` method verifies token via `userService` method call</Assert>
            <Assert>Make sure that `UserController.verifyEmail` method returns registration verification view name</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that `UserServiceImpl.registerUser` creates a not enabled user</Assert>
            <Assert>Make sure that `UserServiceImpl.registerUser` creates an user email verification token</Assert>
            <Assert>Make sure that `verifyEmail` method is added to `UserServiceImpl` class</Assert>
            <Assert>Make sure that `UserServiceImpl.verifyEmail` method enables an user if a non-expired user email verification token exists</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that the application sends an email to the address specified by a registered user and includes an user email verification link</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that the application is built without errors</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that the application is launched without errors</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure that an user can be registered in the application</Assert>
            <Assert>Make sure that the registered user cannot log in to the application until the email address is verified</Assert>
            <Assert>Make sure that the registered user can log in to the application after verifying the email address</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure the application sends an email about the user's registration to the provided address</Assert>
            <Assert>Make sure the user registration email contains email verification link</Assert>
        </Criterion>
        <Criterion type="completeness">
            <Assert>Make sure the non-expired user email verification link can be successfully opened</Assert>
            <Assert>Make sure the expired email verification link opened unsuccessfully</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="functionality">
            <Assert>Ensure that the CHANGED code accomplishes the intended functionality.</Assert>
            <Assert>Ensure that the CHANGED code handles potential edge cases, exceptions, or invalid inputs gracefully where it is required.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="adherence to task requirements">
            <Assert>Make sure that the CHANGES are primarily made to achieve the intended functionality.</Assert>
            <Assert>Make sure that the CHANGES do not contain unrequested modifications, unused imports or code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="code quality">
            <Assert>Ensure that the CHANGED code is syntactically correct, compiles without errors.</Assert>
            <Assert>Ensure that the CHANGED code follows project style guides and maintain consistency with the existing codebase.</Assert>
            <Assert>Ensure that the CHANGED code is clean, readable, adheres to best practices and naming conventions.</Assert>
            <Assert>Ensure that the CHANGED code is easily maintainable, with proper structure and separation of concerns.</Assert>
            <Assert>Make sure that Spring Boot's features such as dependency injection, auto-configuration, and data access abstraction are properly utilized in the the CHANGED code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="documentation">
            <Assert>Ensure that the CHANGED code is well-documented, with clear and concise documentation for each part of the code.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="security">
            <Assert>Ensure that CHANGED code keeps application secure by using proper authentication, authorization, and data validation techniques.</Assert>
            <Assert>Ensure that CHANGED code avoids exposing sensitive data.</Assert>
            <Assert>Ensure that CHANGED code protects the application from common security vulnerabilities.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="configuration">
            <Assert>Ensure that CHANGED application configuration is flexible and externalized to efficiently manage different environments.</Assert>
        </Criterion>
        <Criterion type="accuracy" weight="high" comment="reliability and fault tolerance">
            <Assert>Ensure that application sends an user registration email after committing of user registration transaction</Assert>
            <Assert>Ensure that application sends an user registration email asynchronously</Assert>
        </Criterion>
    </Criteria>
    <MetaInfo>
        <Meta>See [testing-template.md](testing-template.md) for example of extra report sections.</Meta>
        <Meta>See samples of correct solution in the [exemplar directory](exemplar).</Meta>
    </MetaInfo>
</TestSpec>

diff --git a/Directory.Packages.props b/Directory.Packages.props
index e5645c8..98114bf 100644
--- a/Directory.Packages.props
+++ b/Directory.Packages.props
@@ -43,12 +43,12 @@
     <PackageVersion Include="Microsoft.AspNetCore.Mvc.Testing" Version="$(AspnetVersion)" />
     <PackageVersion Include="Microsoft.AspNetCore.OpenApi" Version="$(AspnetVersion)" />
     <PackageVersion Include="Microsoft.AspNetCore.TestHost" Version="$(AspnetVersion)" />
-
     <PackageVersion Include="Microsoft.Extensions.Identity.Stores" Version="$(AspnetVersion)" />
     <PackageVersion Include="Microsoft.Extensions.Http.Resilience" Version="9.2.0" />
-
+    <PackageVersion Include="Moq" Version="4.20.72" />
     <PackageVersion Include="MSTest.TestFramework" Version="3.8.2" />
     <PackageVersion Include="MSTest.TestAdapter" Version="3.8.2" />
+    <PackageVersion Include="Npgsql" Version="9.0.3" />
     <!-- Version together with EF -->
     <PackageVersion Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.4" />
     <PackageVersion Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2" />
@@ -58,7 +58,7 @@
     <PackageVersion Include="Pgvector.EntityFrameworkCore" Version="0.2.1" />
     <!-- Version together with runtime -->
     <PackageVersion Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="$(MicrosoftExtensionsVersion)" />
-    <PackageVersion Include="Microsoft.Extensions.Options" Version="$(MicrosoftExtensionsVersion)" />
+    <PackageVersion Include="Microsoft.Extensions.Options" Version="9.0.3" />
     <PackageVersion Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="$(MicrosoftExtensionsVersion)" />
     <!-- Xabaril packages -->
     <PackageVersion Include="AspNetCore.HealthChecks.Uris" Version="9.0.0" />
@@ -99,10 +99,11 @@
     <PackageVersion Include="Microsoft.Web.LibraryManager.Build" Version="2.1.175" />
     <PackageVersion Include="Polly.Core" Version="8.5.2" />
     <PackageVersion Include="System.Reflection.TypeExtensions" Version="4.7.0" />
+    <PackageVersion Include="Testcontainers.PostgreSql" Version="4.4.0" />
     <PackageVersion Include="xunit" Version="2.9.3" />
     <PackageVersion Include="xunit.runner.visualstudio" Version="3.0.2" />
     <PackageVersion Include="Yarp.ReverseProxy" Version="2.3.0" />
     <PackageVersion Include="IdentityModel" Version="7.0.0" />
-    <PackageVersion Include="Scalar.AspNetCore" Version="2.0.26"/>
+    <PackageVersion Include="Scalar.AspNetCore" Version="2.0.26" />
   </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/eShop.Web.slnf b/eShop.Web.slnf
index 3fcab7f..6e2b168 100644
--- a/eShop.Web.slnf
+++ b/eShop.Web.slnf
@@ -9,8 +9,8 @@
       "src\\Identity.API\\Identity.API.csproj",
       "src\\IntegrationEventLogEF\\IntegrationEventLogEF.csproj",
       "src\\Mobile.Bff.Shopping\\Mobile.Bff.Shopping.csproj",
-      "src\\Ordering.API\\Ordering.API.csproj",
       "src\\OrderProcessor\\OrderProcessor.csproj",
+      "src\\Ordering.API\\Ordering.API.csproj",
       "src\\Ordering.Domain\\Ordering.Domain.csproj",
       "src\\Ordering.Infrastructure\\Ordering.Infrastructure.csproj",
       "src\\PaymentProcessor\\PaymentProcessor.csproj",
diff --git a/eShop.sln b/eShop.sln
index b32d369..ef9ea98 100644
--- a/eShop.sln
+++ b/eShop.sln
@@ -65,6 +65,11 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ClientApp", "src\ClientApp\
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ClientApp.UnitTests", "tests\ClientApp.UnitTests\ClientApp.UnitTests.csproj", "{02878FFB-F4DA-4996-B4A6-308851A837C6}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Ordering.IntegrationTests", "tests\Ordering.IntegrationTests\Ordering.IntegrationTests.csproj", "{29B4A286-BEA4-41E6-B919-6D94BF569C3C}"
+	ProjectSection(ProjectDependencies) = postProject
+		{0E5BE4C6-BF24-4BDA-908F-EFB99D22159D} = {0E5BE4C6-BF24-4BDA-908F-EFB99D22159D}
+	EndProjectSection
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -175,6 +180,10 @@ Global
 		{02878FFB-F4DA-4996-B4A6-308851A837C6}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{02878FFB-F4DA-4996-B4A6-308851A837C6}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{02878FFB-F4DA-4996-B4A6-308851A837C6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{29B4A286-BEA4-41E6-B919-6D94BF569C3C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{29B4A286-BEA4-41E6-B919-6D94BF569C3C}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{29B4A286-BEA4-41E6-B919-6D94BF569C3C}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{29B4A286-BEA4-41E6-B919-6D94BF569C3C}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
@@ -205,6 +214,7 @@ Global
 		{66275483-5364-42F9-B7E6-410E6A1B5ECF} = {932D8224-11F6-4D07-B109-DA28AD288A63}
 		{938803BB-4F6F-4108-BDD1-2AD0180BBDC1} = {932D8224-11F6-4D07-B109-DA28AD288A63}
 		{02878FFB-F4DA-4996-B4A6-308851A837C6} = {A857AD10-40FF-4303-BEC2-FF1C58D5735E}
+		{29B4A286-BEA4-41E6-B919-6D94BF569C3C} = {A857AD10-40FF-4303-BEC2-FF1C58D5735E}
 	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {25728519-5F0F-4973-8A64-0A81EB4EA8D9}
diff --git a/tests/Ordering.IntegrationTests/GracePeriodManagerServiceTests.cs b/tests/Ordering.IntegrationTests/GracePeriodManagerServiceTests.cs
new file mode 100644
index 0000000..532ebfe
--- /dev/null
+++ b/tests/Ordering.IntegrationTests/GracePeriodManagerServiceTests.cs
@@ -0,0 +1,145 @@
+ï»¿using Microsoft.Extensions.Options;
+using Moq;
+using Npgsql;
+using System.Reflection;
+using eShop.OrderProcessor.Services;
+using eShop.OrderProcessor;
+using eShop.EventBus.Abstractions;
+using Testcontainers.PostgreSql;
+using Docker.DotNet;
+using Docker.DotNet.Models;
+using Microsoft.Extensions.Logging;
+
+namespace Ordering.IntegrationTests
+{
+    [TestClass]
+    [DoNotParallelize]
+    [TestCategory("GracePeriodManagerServiceTests")]
+    public class GracePeriodManagerServiceTests
+    {
+        private class MemoryLogger<T> : ILogger<T>
+        {
+            public List<string> LoggedMessages = [];
+
+            public IDisposable BeginScope<TState>(TState state) where TState : notnull
+            {
+                throw new NotImplementedException();
+            }
+
+            public bool IsEnabled(LogLevel logLevel)
+            {
+                return logLevel == LogLevel.Error;
+            }
+
+            public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter)
+            {
+                LoggedMessages.Add(formatter(state, exception));
+            }
+        }
+
+        private static PostgreSqlContainer? postgresContainer;
+
+        private Mock<IOptions<BackgroundTaskOptions>> optionsMock;
+
+        private Mock<IEventBus> eventBusMock = new();
+
+        [ClassInitialize]
+        public static async Task ClassInitializeAsync(TestContext context)
+        {
+            postgresContainer = new PostgreSqlBuilder()
+                .WithDatabase("testdb")
+                .WithUsername("testuser")
+                .WithPassword("testpassword")
+                .Build();
+            await postgresContainer.StartAsync();
+        }
+
+        [ClassCleanup(ClassCleanupBehavior.EndOfClass)]
+        public static async Task ClassCleanupAsync()
+        {
+            if (postgresContainer != null)
+            {
+                try
+                {
+                    await postgresContainer.StopAsync();
+                }
+                finally
+                {
+                    await postgresContainer.DisposeAsync();
+                }
+            }
+
+            // sometimes, testcontainers/ruyk containers are not stopped automatically => forcing them to stop
+            using var dockerClient = new DockerClientConfiguration().CreateClient();
+            var containers = await dockerClient.Containers.ListContainersAsync(new ContainersListParameters() { All = true });
+            foreach (var container in containers)
+            {
+                if (container.Image.StartsWith("testcontainers/ryuk"))
+                {
+                    await dockerClient.Containers.StopContainerAsync(container.ID, new ContainerStopParameters());
+                }
+            }
+        }
+
+        public GracePeriodManagerServiceTests()
+        {
+            // mocking options
+            optionsMock = new();
+            optionsMock.Setup(o => o.Value)
+                .Returns(new BackgroundTaskOptions { GracePeriodTime = 10, CheckUpdateTime = 5 });
+        }
+
+        [TestMethod]
+        public async Task GetConfirmedGracePeriodOrders_PostgresException_NoDetail_NoInnerException()
+        {
+            // Arranging
+            var logger = new MemoryLogger<GracePeriodManagerService>();
+            var postgresConnectionString = postgresContainer!.GetConnectionString();
+            var dataSourceBuilder = new NpgsqlDataSourceBuilder(postgresConnectionString);
+            // note: the database does not contain any tables
+            var dataSource = dataSourceBuilder.Build();
+            var service = new GracePeriodManagerService(optionsMock.Object, eventBusMock.Object, logger, dataSource);
+
+            // Acting
+            var method = typeof(GracePeriodManagerService)
+                .GetMethod("GetConfirmedGracePeriodOrders", BindingFlags.NonPublic | BindingFlags.Instance);
+            var result = await (ValueTask<List<int>>)method!.Invoke(service, null)!;
+
+            // Asserting
+            Assert.AreEqual(0, result.Count);
+            Assert.AreEqual(1, logger.LoggedMessages.Count);
+            Assert.IsTrue(logger.LoggedMessages[0].Contains("SQL error loading confirmed grace period orders: "));
+            Assert.IsTrue(logger.LoggedMessages[0].Contains(PostgresErrorCodes.UndefinedTable));
+            Assert.IsFalse(logger.LoggedMessages[0].Contains("Detail:"));
+            Assert.IsFalse(logger.LoggedMessages[0].Contains("Root cause:"));
+        }
+
+        [TestMethod]
+        public async Task GetConfirmedGracePeriodOrders_NpgsqlException_WithInnerException()
+        {
+            // Arranging
+            var logger = new MemoryLogger<GracePeriodManagerService>();
+            var postgresConnectionString = postgresContainer!.GetConnectionString();
+            var dataSourceBuilder = new NpgsqlDataSourceBuilder(postgresConnectionString);
+            // note: the database does not contain any tables
+            var dataSource = dataSourceBuilder.Build();
+            var service = new GracePeriodManagerService(optionsMock.Object, eventBusMock.Object, logger, dataSource);
+            // shutting down the container
+            await postgresContainer.StopAsync();
+
+            // Acting
+            var method = typeof(GracePeriodManagerService)
+                .GetMethod("GetConfirmedGracePeriodOrders", BindingFlags.NonPublic | BindingFlags.Instance);
+            var result = await(ValueTask<List<int>>)method!.Invoke(service, null)!;
+
+            // Asserting
+            Assert.AreEqual(0, result.Count);
+            Assert.AreEqual(1, logger.LoggedMessages.Count);
+            Assert.IsTrue(logger.LoggedMessages[0].Contains("General error loading confirmed grace period orders: "));
+            Assert.IsTrue(logger.LoggedMessages[0].Contains("Root cause:"));
+
+            // Cleanup
+            await postgresContainer.StartAsync();
+        }
+    }
+}
diff --git a/tests/Ordering.IntegrationTests/MSTestSettings.cs b/tests/Ordering.IntegrationTests/MSTestSettings.cs
new file mode 100644
index 0000000..aaf278c
--- /dev/null
+++ b/tests/Ordering.IntegrationTests/MSTestSettings.cs
@@ -0,0 +1 @@
+ï»¿[assembly: Parallelize(Scope = ExecutionScope.MethodLevel)]
diff --git a/tests/Ordering.IntegrationTests/Ordering.IntegrationTests.csproj b/tests/Ordering.IntegrationTests/Ordering.IntegrationTests.csproj
new file mode 100644
index 0000000..958a693
--- /dev/null
+++ b/tests/Ordering.IntegrationTests/Ordering.IntegrationTests.csproj
@@ -0,0 +1,22 @@
+<Project Sdk="MSTest.Sdk/3.6.4">
+
+  <PropertyGroup>
+    <TargetFramework>net9.0</TargetFramework>
+    <LangVersion>latest</LangVersion>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+    <UseVSTest>true</UseVSTest>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.Extensions.Options" />
+    <PackageReference Include="Moq" />
+    <PackageReference Include="Npgsql" />
+    <PackageReference Include="Testcontainers.PostgreSql" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\..\src\OrderProcessor\OrderProcessor.csproj" />
+  </ItemGroup>
+
+</Project>
